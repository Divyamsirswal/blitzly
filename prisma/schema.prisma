generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String          @id @default(cuid())
    name                   String?
    email                  String?         @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    reports                Report[]
    stripeCustomerId       String?
    subscriptionStatus     String?         @default("inactive")
    subscriptionTier       String?         @default("free")
    preferences            Json?           @default("{\"theme\":\"system\",\"emailNotifications\":true,\"shareAnalytics\":false}")
    apiKey                 String?         @unique
    Comment                Comment[]
    reportedComments       CommentReport[]
    notifications          Notification[]
    triggeredNotifications Notification[]  @relation("TriggeredBy")
}

model Report {
    id            String       @id @default(cuid())
    title         String
    content       String?
    metrics       Json?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    isPublic      Boolean      @default(false)
    shareToken    String?      @unique
    // shareSettings structure:
    // {
    //   allowComments: boolean,
    //   requireAuth: boolean,
    //   expiryDate: string | null,
    //   sharingMode: "anyone" | "specific",
    //   allowedViewers: string[] // array of email addresses
    // }
    shareSettings Json?
    views         Int          @default(0)
    authorId      String
    author        User         @relation(fields: [authorId], references: [id])
    comments      Comment[]
    ReportView    ReportView[]

    @@index([authorId])
}

model ReportView {
    id        String   @id @default(cuid())
    reportId  String
    report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
    viewedAt  DateTime @default(now())
    viewerIp  String?
    userAgent String?  @db.Text

    @@index([reportId])
}

model Comment {
    id         String          @id @default(cuid())
    content    String
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
    reportId   String
    report     Report          @relation(fields: [reportId], references: [id], onDelete: Cascade)
    authorId   String
    author     User            @relation(fields: [authorId], references: [id])
    isReported Boolean         @default(false)
    isHidden   Boolean         @default(false)
    reports    CommentReport[]

    @@index([reportId])
    @@index([authorId])
}

model CommentReport {
    id         String   @id @default(cuid())
    commentId  String
    comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    reporterId String
    reporter   User     @relation(fields: [reporterId], references: [id])
    reason     String
    createdAt  DateTime @default(now())
    status     String   @default("pending") // pending, reviewed, dismissed

    @@index([commentId])
    @@index([reporterId])
}

model Notification {
    id        String   @id @default(cuid())
    title     String
    message   String
    type      String // info, alert, reminder, comment, mention, share, report
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    userId String // User receiving the notification
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Optional relations
    triggeredById String? // User who triggered the notification (if applicable)
    triggeredBy   User?   @relation("TriggeredBy", fields: [triggeredById], references: [id])

    // Optional entity references
    entityId   String? // ID of related entity (report, comment, etc.)
    entityType String? // Type of entity (report, comment, etc.)
    actionUrl  String? // URL to navigate to when clicking the notification

    // Metadata
    metadata Json? // Additional data specific to notification type

    // For email notifications
    emailSent Boolean @default(false)

    @@index([userId])
    @@index([triggeredById])
    @@index([entityId])
    @@index([type])
    @@index([read])
}
